// <auto-generated />
using System;
using Cars_CRUD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cars_CRUD.Data.Migrations
{
    [DbContext(typeof(CarsContext))]
    [Migration("20190721091655_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cars_CRUD.Data.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedFrom");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("ModifiedFrom");

                    b.Property<int>("ModifiedRevCounter");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarCategoryId");

                    b.Property<int>("CarImpactClassId")
                        .HasColumnName("ImpactClass_Index");

                    b.Property<int>("CarProbabilityClassId")
                        .HasColumnName("ProbabilityClass_Index");

                    b.Property<DateTime>("CreatedFrom");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<Guid>("GarageId");

                    b.Property<string>("ModifiedFrom");

                    b.Property<int>("ModifiedRevCounter");

                    b.Property<int>("ObjectStatus");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("CarImpactClassId");

                    b.HasIndex("CarProbabilityClassId");

                    b.HasIndex("GarageId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.CarCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedFrom");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("ModifiedFrom");

                    b.Property<int>("ModifiedRevCounter");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectStatus");

                    b.Property<int>("Ordinal");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("CarCategories");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.CarImpactClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Index")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CarImpactClasses");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.CarProbabilityClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Index")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CarProbabilityClasses");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.Garage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AreaId");

                    b.Property<DateTime>("CreatedFrom");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<Guid>("GarageTypeId");

                    b.Property<string>("ModifiedFrom");

                    b.Property<int>("ModifiedRevCounter");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedFrom");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ModifiedFrom");

                    b.Property<int>("ModifiedRevCounter");

                    b.Property<DateTime>("StartDate");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.Car", b =>
                {
                    b.HasOne("Cars_CRUD.Data.Entities.CarCategory", "CarCategory")
                        .WithMany("Cars")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cars_CRUD.Data.Entities.CarImpactClass", "CarImpactClass")
                        .WithMany()
                        .HasForeignKey("CarImpactClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cars_CRUD.Data.Entities.CarProbabilityClass", "CarProbabilityClass")
                        .WithMany()
                        .HasForeignKey("CarProbabilityClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cars_CRUD.Data.Entities.Garage", "Garage")
                        .WithMany("Cars")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cars_CRUD.Data.Entities.Garage", b =>
                {
                    b.HasOne("Cars_CRUD.Data.Entities.Area", "Area")
                        .WithMany("Garages")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
